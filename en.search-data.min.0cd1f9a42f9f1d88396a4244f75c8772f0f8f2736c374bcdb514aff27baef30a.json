[{"id":0,"href":"/powershell/file/","title":"File","section":"PowerShell","content":" Extension # System.IO.Path.GetExtension # [System.IO.Path]::GetExtension(Draftv2.zip) Returns the extension (including the period \u0026ldquo;.\u0026rdquo;) of the specified path string. See also M$ Learn.\nFileSystemInfo.Extension # \u0026gt; (Get-ChildItem Draftv2.zip).Extension .zip \u0026gt; (Get-Item Draftv2.zip).Extension .zip Gets the extension part of the file name, including the leading dot . even if it is the entire file name, or an empty string if no extension is present. See also M$ Learn.\nExpand-Archive # Expand-Archive -Path Draftv2.zip -DestinationPath C:\\Reference The Expand-Archive cmdlet extracts files from a specified zipped archive file to a specified destination folder. See also M$ Learn.\n"},{"id":1,"href":"/sql/common-expressions/","title":"Common Expressions","section":"SQL","content":" CASE # CASE WHEN condition1 THEN result1 WHEN condition2 THEN result2 WHEN conditionN THEN resultN ELSE result END; The CASE expression goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause.If there is no ELSE part and no conditions are true, it returns NULL. See also w3schools.\n"},{"id":2,"href":"/redis/common-commands/","title":"Common Commands","section":"Redis","content":" Database # DBSIZE # DBSIZE Return the number of keys in the currently-selected database. see also redis.io.\nFLUSHALL # FLUSHALL [ASYNC | SYNC] Remove all keys from all database. see also redis.io.\nFLUSHDB # FLUSHDB [ASYNC | SYNC] Remove all keys from the current database. see also redis.io.\nSELECT # SELECT index Change the selected database for the current connection. see also redis.io.\nKey # KEYS # KEYS pattern Returns all keys matching pattern. See also redis.io.\nEXISTS # EXISTS key [key ...] Determine if a key exists. See also redis.io.\nEXPIRE # EXPIRE key seconds [NX | XX | GT | LT] Set a key\u0026rsquo;s time to live in seconds. See also redis.io.\nTTL # TTL key Get the time to live for a key in seconds. See also redis.io.\nTYPE # TYPE key Determine the type stored at key. See also redis.io.\nSTRLEN # STRLEN key Get the length of the value stored in a key. See also redis.io.\nValue # GET # GET key Get the value of a key. See also redis.io.\nGETRANGE # GETRANGE key start end Get a substring of the string stored at a key. See also redis.io.\nAPPEND # APPEND key value Append a value to a key. See also redis.io.\nSET # SET key value [NX | XX] [GET] [EX seconds | PX milliseconds | EXAT unix-time-seconds | PXAT unix-time-milliseconds | KEEPTTL] Set the string value of a key. See also redis.io.\nSETRANGE # SETRANGE key offset value Overwrite part of a string at key starting at the specified offset. See also redis.io.\nMGET # MGET key [key ...] Get the values of all given keys. See also redis.io.\nMSET # MSET key value [key value ...] Set multiple keys to multiple values. See also redis.io.\nMSETNX # MSETNX key value [key value ...] Set multiple keys to multiple values, only if none of the key exist. See also redis.io.\nINCR # INCR key Increment the integer value of a key by one. See also redis.io.\nDECR # DECR key Decrement the integer value of a key by one. See also redis.io.\nINCRBY # INCRBY key increment Increment the integer value of a key by the given number. See also redis.io.\nDECRBY # DECRBY key decrement Decrement the integer value of a key by the given number. See also redis.io.\nList # LPUSH # LPUSH key element [element ...] Prepend one or multiple elements to a list. See also redis.io.\nRPUSH # RPUSH key element [element ...] Apend one or multiple elements to a list. See also redis.io.\nLRANGE # LRANGE key start stop Get a range of elements from a list. See also redis.io.\nLINDEX # LINDEX key index Get an element from a list by its index. See also redis.io.\nLPOP # LPOP key [count] Remove and get the first elements in a list. See also redis.io.\nRPOP # RPOP key [count] Remove and get the last elements in a list. See also redis.io .\nLLEN # LLEN key Get the length of a list. See also redis.io.\nLREM # LREM key count element Remove elements of a list. See also redis.io.\nLTRIM # LTRIM key start stop Trim the list to the specified range. See also redis.io.\nLSET # LSET key index element Set the value of an element in a list by its index. See also redis.io.\nLINSERT # LINSERT key \u0026lt;BEFORE | AFTER\u0026gt; pivot element Insert an element before or after another element in list. See also redis.io.\nSet # SADD # SADD key member [member ...] Add one or more members to a set. See also redis.io.\nSMEMBERS # SMEMBERS key Get all the members in a set. See also redis.io.\nSISMEMBER # SISMEMBER key member Determine if a given value is a member of a set. See also redis.io.\nSCARD # SCARD key Get the number of members in a set. See also redis.io.\nSREM # SREM key member [member ...] Remove one or more members from a set. See also redis.io.\nSRANDMEMBER # SRANDMEMBER key [count] Get one or multiple random members from a set. See also redis.io.\nSPOP # SPOP key [count] Remove and return one or multiple random members from a set. See also redis.io.\nSMOVE # SMOVE source destination member Move a member from one set to another. See also redis.io.\nSDIFF # SDIFF key [key ...] Subtract multiple sets. See also redis.io.\nSINTER # SINTER key [key ...] Intersect multiple sets. See also redis.io.\nSUNION # SUNION key [key ...] Add multiple sets. See also redis.io.\nHash # HGET # HGET key field Get the value of a hash field. See also redis.io.\nHSET # HSET key field value [field value ...] Set the string value of a hash field. See also redis.io.\nHMGET # HMGET key field [field ...] Get the values of all given hash fields. See also redis.io.\nHGETALL # HGETALL key Get all the fields and values in a hash. See also redis.io.\nHDEL # HDEL key field [field ...] Delete one or more hash fields. See also redis.io.\nHLEN # HLEN key Get the number of fields in a hash. See also redis.io.\nHEXISTS # HEXISTS key field Determine if a hash field exists. See also redis.io.\nHKEYS # HEXISTS key field Get all the fields in a hash. See also redis.io.\nHVALS # HVALS key Get all the values in a hash. See also redis.io.\nHINCRBY # HINCRBY key field increment Increment the integer value of a hash field by the given number. redis.io.\nHSETNX # HSETNX key field value Set the value of a hash field, only if the field does not exist. See also redis.io.\nSorted Set # ZADD # ZADD key [NX | XX] [GT | LT] [CH] [INCR] score member [score member...] Add one or more members to a sorted set, or update its score if it already exists. See also redis.io.\nZRANGE # ZRANGE key start stop [BYSCORE | BYLEX] [REV] [LIMIT offset count] [WITHSCORES] Return a range of members in a sorted set. See also redis.io.\nZREM # ZREM key member [member ...] Remove one or more members from a sorted set. See also redis.io.\nZCARD # ZCARD key Get the number of members in a sorted set. See also redis.io.\nZCOUNT # ZCOUNT key min max Count the members in a sorted set with scores within the given values. See also redis.io.\n"},{"id":3,"href":"/sql/common-functions/","title":"Common Functions","section":"SQL","content":" COALESCE # SELECT COALESCE(NULL, NULL, NULL, \u0026#39;W3Schools.com\u0026#39;, NULL, \u0026#39;Example.com\u0026#39;); Return the first non-null value in a list. See also w3schools.\nIFNULL # SELECT IFNULL(NULL, \u0026#34;W3Schools.com\u0026#34;); Return the specified value IF the expression is NULL, otherwise return the expression. See also w3schools.\nIF # SELECT IF(500\u0026lt;1000, \u0026#34;YES\u0026#34;, \u0026#34;NO\u0026#34;); The IF() function returns a value if a condition is TRUE, or another value if a condition is FALSE. See also w3schools.\n"},{"id":4,"href":"/redis/transactions/","title":"Transations","section":"Redis","content":" Usage # \u0026gt; MULTI OK \u0026gt; INCR foo QUEUED \u0026gt; INCR bar QUEUED \u0026gt; EXEC 1) (integer) 1 2) (integer) 1 DISCARD # \u0026gt; SET foo 1 OK \u0026gt; MULTI OK \u0026gt; INCR foo QUEUED \u0026gt; DISCARD OK \u0026gt; GET foo \u0026#34;1\u0026#34; Optimistic locking using check-and-set # WATCH mykey val = GET mykey val = val + 1 MULTI SET mykey $val EXEC It is also possible to use the UNWATCH command manually in order to flush all the watched keys.\nSee also # Transaction | Redis.\n"},{"id":5,"href":"/sql/views/","title":"Views","section":"SQL","content":" Altering view # The CREATE OR REPLACE VIEW command updates a view. See also w3schools.\nCREATE OR REPLACE VIEW [Brazil Customers] AS SELECT CustomerName, ContactName, City FROM Customers WHERE Country = \u0026#34;Brazil\u0026#34;; WITH CHECK OPTION # The WITH CHECK OPTION clause can be given for an updatable view to prevent inserts to rows for which the WHERE clause in the select_statement is not true. It also prevents updates to rows for which the WHERE clause is true but the update would cause it to be not true (in other words, it prevents visible rows from being updated to nonvisible rows). See also MySQL.\nCREATE TABLE t1 (a INT); CREATE VIEW v1 AS SELECT * FROM t1 WHERE a \u0026lt; 2 WITH CHECK OPTION; CREATE VIEW v2 AS SELECT * FROM v1 WHERE a \u0026gt; 0 WITH LOCAL CHECK OPTION; CREATE VIEW v3 AS SELECT * FROM v1 WHERE a \u0026gt; 0 WITH CASCADED CHECK OPTION; mysql\u0026gt; INSERT INTO v2 VALUES (2); Query OK, 1 row affected (0.00 sec) mysql\u0026gt; INSERT INTO v3 VALUES (2); ERROR 1369 (HY000): CHECK OPTION failed \u0026#39;test.v3\u0026#39; "},{"id":6,"href":"/sql/stored-procedures/","title":"Stored Procedures","section":"SQL","content":" Defining Stored Programs in MySQL # If you use the mysql client program to define a stored program containing semicolon characters, a problem arises. By default, mysql itself recognizes the semicolon as a statement delimiter, so you must redefine the delimiter temporarily to cause mysql to pass the entire stored program definition to the server. To redefine the mysql delimiter, use the delimiter command. See also MySQL Reference manual.\nmysql\u0026gt; delimiter // mysql\u0026gt; CREATE PROCEDURE dorepeat(p1 INT) -\u0026gt; BEGIN -\u0026gt; SET @x = 0; -\u0026gt; REPEAT SET @x = @x + 1; UNTIL @x \u0026gt; p1 END REPEAT; -\u0026gt; END -\u0026gt; // Query OK, 0 rows affected (0.00 sec) mysql\u0026gt; delimiter ; "}]